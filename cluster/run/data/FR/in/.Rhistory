library(parallel)
# country on which simulations are performed
country <- "FR"
# years for which the simulations are performed
iniY <- 1910
endY <- 2017
# size of the initial population
N <- 100
# nr of populations
npop <- 25
o_file <- "outH6.txt"
if (file.exists(o_file)){file.remove(o_file)}
cl <- makeCluster(npop, type = "PSOCK", outfile = o_file)
# Load libraries
clusterEvalQ(cl, library(lubridate))
clusterEvalQ(cl, library(data.table))
clusterEvalQ(cl, library(truncdist))
# Source country files
path_to = function(file){
paste0("data/", country, "/in/", file)}
clusterExport(cl, "path_to", envir = environment())
clusterExport(cl,"country", envir = environment())
clusterExport(cl,"N", envir = environment())
clusterExport(cl,"iniY", envir = environment())
clusterExport(cl,"endY", envir = environment())
clusterCall(cl, function() {
source(path_to("free_param.R"))
source(path_to("fixed_param.R"))  # load fixed parameters
source("data_&_funs.R") # load some functions
source("waiting_times.R") # load function to generate tikes
source("comfert.R") # load function running the simulation
})
s <- Sys.time()
output <- parLapply(cl, 1:npop, function (x) comfert(x, optim_run = F))
e <- Sys.time()
print(e-s)
cat("finished parallel processes \n")
stopCluster(cl)
library(parallel)
# country on which simulations are performed
country <- "FR"
# years for which the simulations are performed
iniY <- 1910
endY <- 2017
# size of the initial population
N <- 100
# nr of populations
npop <- 25
o_file <- "outH6.txt"
if (file.exists(o_file)){file.remove(o_file)}
cl <- makeCluster(npop, type = "PSOCK", outfile = o_file)
# Load libraries
clusterEvalQ(cl, library(lubridate))
clusterEvalQ(cl, library(data.table))
clusterEvalQ(cl, library(truncdist))
# Source country files
path_to = function(file){
paste0("data/", country, "/in/", file)}
clusterExport(cl, "path_to", envir = environment())
clusterExport(cl,"country", envir = environment())
clusterExport(cl,"N", envir = environment())
clusterExport(cl,"iniY", envir = environment())
clusterExport(cl,"endY", envir = environment())
clusterCall(cl, function() {
source(path_to("free_param.R"))
source(path_to("fixed_param.R"))  # load fixed parameters
source("data_&_funs.R") # load some functions
source("waiting_times.R") # load function to generate tikes
source("comfert.R") # load function running the simulation
})
s <- Sys.time()
output <- parLapply(cl, 1:npop, function (x) comfert(x, optim_run = F))
e <- Sys.time()
print(e-s)
cat("finished parallel processes \n")
stopCluster(cl)
rm(list = ls())
country <- "FR"
# years for which the simulations are performed
iniY <- 1910
endY <- 2017
# size of the initial population
N <- 100
# nr of populations
npop <- 25
library(lubridate)
library(data.table)
library(truncdist)
# Source country files
path_to = function(file){
paste0("data/", country, "/in/", file)}
source(path_to("free_param.R"))
source(path_to("fixed_param.R"))  # load fixed parameters
source("data_&_funs.R") # load some functions
source("waiting_times.R") # load function to generate tikes
source("comfert.R") # load function running the simulation
